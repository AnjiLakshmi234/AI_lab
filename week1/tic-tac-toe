def print_board(board):
    """Prints the current state of the board in a 3x3 box format (no row/col numbers)"""
    for i, row in enumerate(board):
        print(" " + " | ".join(row))
        if i < 2:
            print("---+---+---")


def check_winner(board, player):
    """Check if the given player has won"""
    # Rows
    for row in board:
        if all(s == player for s in row):
            return True
    # Columns
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    # Diagonals
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2 - i] == player for i in range(3)):
        return True
    return False


def is_full(board):
    """Check if the board is full (draw)"""
    return all(all(cell != " " for cell in row) for row in board)


def tic_tac_toe():
    """Main game loop"""
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ["X", "O"]
    turn = 0

    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
        player = players[turn % 2]
        print(f"\nPlayer {player}'s turn")

      
        while True:
            try:
                row = int(input("Enter row (0-2): "))
                col = int(input("Enter col (0-2): "))
                if row not in range(3) or col not in range(3):
                    print("Invalid position! Try again.")
                elif board[row][col] != " ":
                    print("Cell already taken! Try again.")
                else:
                    break
            except ValueError:
                print("Please enter numbers only.")

      
        board[row][col] = player
        print_board(board)

      
        if check_winner(board, player):
            print(f"ðŸŽ‰ Player {player} wins!")
            break

        if is_full(board):
            print("It's a draw!")
            break

        turn += 1


if __name__ == "__main__":
    tic_tac_toe()
